import cv2
import imutils
import pandas as pd
#注：x：垂直
#   y：水平
map = {44:(2700,600),204:(2700,700),200:(750,2100),240:(800,2150),259:(850,2250),
       220:(900,2100),254:(900,2300),128:(950,2000),153:(950,2050),241:(950,2100),
       174:(950,2200),81:(950,2350),51:(950,2400),184:(950,2450),127:(1000,2000),
       136:(1000,2100),18:(1000,2150),174:(1000,2200),3:(1000,2300),12:(1050,2000),
       236:(1050,2050),94:(1050,2100),20:(1050,2150),31:(1050,2200),32:(1050,2250),
       243:(1070,1970),244:(1100,1950),236:(1100,2000),169:(1100,2050),47:(1100,2100),
       165:(1100,2250),242:(1100,2350),119:(1150,2000),69:(1150,2050),59:(1150,2100),
       78:(1150,2150),183:(1150,2350),46:(1150,2550),116:(1200,1850),247:(1200,1950),
       60:(1200,2100),182:(1200,2250),250:(1200,2300),208:(1200,2350),58:(1200,2400),
       152:(1250,1850),159:(1250,2000),126:(1250,2100),213:[(1250,2150),(1275,2325)],41:(1300,1850),
       168:(1300,1950),238:(1350,1750),74:(1350,1900),43:(1400,1800),75:(1400,1850),
       194:(1400,1950),199:(1400,2100),143:(1450,1700),163:[(1450,1850),(1508,1709)],223:(1450,2000),
       53:(1450,2250),252:(1450,2300),15:(1450,2550),142:(1500,1700),141:(1500,1800),
       179:(1500,1950),138:(1500,2150),246:(1550,1600),48:(1550,1650),161:(1550,1700),
       162:(1550,1750),140:(1550,1800),7:(1500,1900),207:(1550,2050),129:(1550,2100),
       70:(1550,2150),171:(1550,2350),64:(1550,2650),54:(1899,1571),68:(1600,1600),233:(1600,1750),
       145:(1600,1850),146:(1600,1900),260:(1600,2000),93:(1600,2250),92:(1600,2300),
       16:(1600,2500),249:(1650,1600),234:(1650,1650),137:(1650,1700),226:(1650,1900),
       83:(1650,2050),173:(1650,2150),73:(1650,2400),9:(1650,2500),176:(1650,2600),
       114:(1700,1600),79:(1700,1650),224:(1700,1700),112:(1700,1800),82:(1700,2150),
       56:(1700,2200),192:(1700,2300),101:(1700,2750),231:(1750,1550),144:(1750,1600),
       148:(1750,1650),4:(1750,1700),255:(1750,1800),112:(1750,1850),157:(1750,2000),
       196:(1750,2150),95:(1750,2200),135:(1750,2300),121:(1750,2400),98:(1750,2450),
       175:(1750,2600),19:(1750,2750),87:(1800,1550),232:(1800,1650),256:(1800,1750),
       80:[(1800,1850),(1807,1893)],157:(1800,1950),160:(1800,2050),33:(1850,1600),66:(1850,1650),
       217:(1850,1750),37:(1850,1850),36:(1850,1900),198:(1850,1950),131:(1850,2450),
       191:(1850,2600),105:(1900,1500),65:(1900,1600),97:(1900,1700),49:(1900,1750),
       17:(1900,1800),225:(1900,1850),102:(1900,2050),96:(1900,2100),134:(1900,2250),
       28:(1900,2350),130:(1900,2450),122:(1900,2550),195:(1950,1550),40:(1950,1600),
       25:(1950,1650),63:(1950,2100),258:(1950,2150),197:(1950,2250),215:(1950,2450),
       195:(2000,1550),106:(2000,1600),181:(2000,1650),61:(2000,1750),177:(2000,1950),
       216:(2000,2300),205:(2000,2500),38:(2000,2650),190:(1050,1700),62:(2050,1750),
       35:(2050,1950),77:(2050,2000),76:(2050,2050),180:(2050,2150),216:(2050,2250),
       10:(2050,2400),205:(2050,2500),139:(2050,2600),38:(2050,2650),206:(2100,1100),
       228:(2100,1550),111:(2100,1600),257:(2100,1650),190:(2100,1700),188:(2100,1750),
       124:(2100,2150),218:(2100,2500),156:(2150,750),187:(2150,950),251:(2150,1100),
       227:(2150,1550),89:(2150,1700),85:(2150,1750),71:(2150,1800),72:(2150,1850),
       132:(2150,2300),219:(2150,2450),203:(2150,2650),23:(2200,750),251:(2200,1050),
       115:(2200,1200),14:(2200,1400),245:(2200,1100),26:(2200,1550),133:(2200,1650),
       39:(2200,1900),222:(2200,2050),221:(2250,1200),67:(2250,1500),165:(2250,1700),
       91:(2250,1800),118:(2300,1100),22:(2300,1500),178:(2300,1650),155:(2300,1900),
       99:(2350,850),214:(2350,1200),6:(2350,1250),11:(2350,1500),21:(2350,1600),
       149:(2350,1700),155:(2350,1850),123:(2400,1650),154:[(2400,1850),(2450,1850),(2497,1755),(2474,1824)],
       172:(2450,1100),
       105:(2450,1600),210:(2450,1750),30:[(2400,2250),(2474,2238)],86:(2450,2500),176:(2500,1000),
       55:(2500,1500),29:(2500,1650),117:(2500,2350),5:(2550,800),109:(2550,900),
       201:(2550,2250),84:(2600,850),27:(2650,1750),110:(2700,1000),185:(1075,2225),
       42:(1175,1925),248:(1175,2225),167:(1225,2025),147:(1225,2075),212:(1225,2175),
       166:(1275,1825),151:(1325,1775),239:(1425,1725),236:(1425,1825),237:(1475,1775),
       263:[(1475,1825),(1439,1874)],50:(1525,1625),163:[(1525,1725)],193:(1525,1875),7:(1525,1975),
       100:(1575,1675),229:(1575,1775),90:(1625,1625),164:(1625,1675),170:(1625,1725),
       253:[(1625,2275)],158:(1675,1575),113:(1675,1625),107:(1675,1675),125:(1725,1575),
       13:[(1775,1525)],261:(1825,1525),209:(1825,1575),34:(1875,1725),54:[(1925,1575)],
       189:(1975,1675),150:(2525,1725),235:(1048,2031),120:[(1117,1962)],46:(1117,2629),
       24:(1324,1801),262:[(1462,1847),(1485,1847)],8:[(1462,1962)],230:[(1531,1686),(1554,1663)],
       202:[(1531,1847),(1554,1824)],57:(1646,2215),211:(1715,1594),45:(1784,1594),88:(1830,1525),
       65:(1876,1640),
       2:[(2275,2125),(2500,2500),(2450,2350),(2450,2100),(2300,2200),(2300,2250),(2350,2050),
          (2497,2054),(2428,2192),(2350,2100),(2350,2300),(2350,2350),(2400,2100),(2400,2150),(2400,2350)]}
color={0:(0,50,90),1:(50,100,200),2:(70,90,8),3:(200,70,10),4:(89,0,30),5:(30,90,170),6:(200,0,180),7:(76,9,0)}

def fill(id,color,origin):
    """
    给地图的id区染上color色
    :param id:
    :param color:
    :param origin:
    :return:
    """
    if(id not in map.keys()):
        print(id)
        return
    if(type(map[id])==list):
        for val in map[id]:
            color_map(val,color,origin)
    elif(type(map[id])==tuple):
        color_map(map[id],color,origin)


def color_map(point,color,origin):
    """
    从起点处起染一个连通区域。
    :param point: 起点坐标 (X,Y)
    :param color: 颜色: (R,G,B)
    :param origin: 图
    :return:
    """

    dx = [-1,1,0,0]
    dy = [0,0,1,-1]
    k = origin.shape[0]
    visited = {(point[0]*k+point[1])}
    list = []
    list.append(point)
    flag = False
    while(len(list)>0):
        pt = list.pop(0)

        origin[pt]=color
        # print(pt)
        for i in range(0,4):
            dpt = (pt[0]+dx[i],pt[1]+dy[i])
            if(dpt[0]>0 and dpt[0]< origin.shape[0] and dpt[1]>0 and dpt[1]< origin.shape[1]):
                if(((dpt[0]*k+dpt[1]) not in visited)  and (origin[dpt][0])+int(origin[dpt][1])+int(origin[dpt][2])>720):
                    list.append(dpt)
                    visited.add(dpt[0]*k+dpt[1])
                    flag=True
    return flag

def show(origin):
    cv2.imshow("ima",imutils.resize(origin,700))
    if cv2.waitKey(1000):
        cv2.destroyAllWindows()


def Draw_Grid():
    origin = cv2.imread("../NYCmap/MapBorder.jpg")
    #print(origin.shape)
    for i in range(0,3000,50):
        if(i%250==0):
            cv2.line(origin, (i, 0), (i, 2999), (255, 255, 0), 2)
        cv2.line(origin,(i,0),(i,2999),(155,155,0),1)
    for i in range(0,3000,50):
        if(i % 250 == 0):
            cv2.line(origin, (0, i), (2999, i), (255, 0, 255), 2)
        cv2.line(origin,(0,i),(2999,i),(155,0,155),1)

    cv2.imwrite("GridedMapBorder.jpg", origin, params=[cv2.IMWRITE_JPEG_QUALITY, 100])
    # cv2.imshow("ima",imutils.resize(origin,1000))
    # if cv2.waitKey(10000):
    #     cv2.destroyAllWindows()

def Paint_lable(color_map,origin,path="../NYC/output.csv"):
    df = pd.read_csv(path)
    describe = df.describe()
    maxID = describe.loc["max", "ID"]
    for index, row in df.iterrows():
        print(index,row["ID"],row["label"])
        fill(int(row["ID"]),color_map[int(row["label"])],origin)


def FinalUse():
    origin = cv2.imread("../NYCmap/MapBorder.jpg")
    Paint_lable(color, origin)
    show(origin)
    cv2.imwrite("../NYCmap/YG_Half_label.jpg", origin, params=[cv2.IMWRITE_JPEG_QUALITY, 100])

def debug_paintArea():
    origin = cv2.imread("../NYCmap/MapBorder.jpg")
    for k in range(1,265):
        fill(k,(255,200,0),origin)
    cv2.imwrite("../NYCmap/marked.jpg", origin, params=[cv2.IMWRITE_JPEG_QUALITY, 100])
# cv2.imwrite("../NYCmap/id_map/"+str(k)+".jpg", origin, params=[cv2.IMWRITE_JPEG_QUALITY, 100])

if __name__ == '__main__':
    pass






    """
    # df = pd.read_parquet("../NYCmap/taxi_zones.dbf")
    # print(df.to_string())
    origin = cv2.imread("../NYCmap/maps.png",cv2.IMREAD_GRAYSCALE)
    blur = cv2.GaussianBlur(origin,(3,3),0)
    # canny = cv2.Canny(blur,50,50)
    # cv2.imshow("origin", imutils.resize(canny, 600))

    ret, thous = cv2.threshold(blur, 210, 255, cv2.THRESH_BINARY)

    cv2.imwrite("MapBorder.jpg",thous,params=[cv2.IMWRITE_JPEG_QUALITY,99])
    # if cv2.waitKey(1000):
    #     cv2.destroyAllWindows()
    """
    # origin = cv2.imread("../NYCmap/MapBorder.jpg")

        # print(int(origin[(i,i)][1])+int(origin[(i,i)][0]))

    # for i in range(1025,3000,23):
    #     for j in range(1525,3000,23):
    #         print((i,j))
    #         origin = cv2.imread("../NYCmap/marked.jpg")
    #         if color_map((i,j),(0,90,135),origin):
    #             cv2.imwrite("../NYCmap/marks/"+str(i)+","+str(j)+".jpg", origin, params=[cv2.IMWRITE_JPEG_QUALITY, 100])


    # origin = cv2.imread("../NYCmap/MapBorder.jpg")
    # for k in range(1,265):
    #
    #     fill(k,(255,200,0),origin)
    # # show(origin)
    #
    # cv2.imwrite("../NYCmap/marked.jpg", origin, params=[cv2.IMWRITE_JPEG_QUALITY, 100])
    # cv2.imwrite("../NYCmap/id_map/"+str(k)+".jpg", origin, params=[cv2.IMWRITE_JPEG_QUALITY, 100])

    # Draw_Grid()
